[{"content":"日前，百度网盘可谓是一波未平一波又起，no zuo no die。先是有用户举报第三方软件 Pandownload 私自分享泄露隐私，警方跨省抓人，再有百度网盘 PC 版客户端被发现默认开启用户激励计划，占用用户磁盘空间和上行带宽。\n百度的吃相正如当年开始走下坡路的迅雷一点点难看了起来。其实普通会员限速没问题，国外网盘也这么干，可惜你充钱超会依然会面临被限速的风险，充钱不能使我强力这就 ™ 很尴尬了。百度网盘本身默认就是使用 P2P 技术的，根据百度帮助中心的说明，P2P 功能是没有办法关闭的，当年的迅雷是可以关闭，虽然据说还是会偷偷上传。而现在这个所谓的用户激励计划又是怎么一回事呢？\n首先默认的 P2P 是针对你正在下载或者拥有的文件，会通过 P2P 从其他用户那里加速或者你自己分享给其他用户。而激励计划是百度网盘要占用你的磁盘 5G 空间来缓存提供类似 CDN 的功能，占用上行带宽最大 1MB/s 的速度。这种功能其实迅雷等其他公司很早做过很多类似的硬件，但也没有私自给用户开启的理由。\n目前随便搜了下，在知乎上 2 月 2 日就有讨论了，所以这个功能至少存在 2 个多月了，不是最近才有的，只是最近结合警方抓人事件被爆了出来，扩大了影响。我看了下我的百度网盘客户端，确实默认开启了激励计划，而且我有 14 个积分，也印证了这个功能存在一段时间了。在很长一段时间里，百度网盘官网也好，客户端也罢，并没有发布通告告知用户这个功能，私自占用用户资源，这才是对用户隐私的不尊重。\n说一千道一万，从目前的奖励来看，百度网盘就是想要白嫖用户。你要知道迅雷当年推出类似产品的时候，第一批用户的收益还是不错的。而百度一开始推这个功能，态度就不端正，偷偷摸摸，只想着如何收割付费用户，而不是如何提高用户体验，这样的产品很难要让人相信以后不会偷偷摸摸在后台上传。\n我个人是不会用百度网盘来存资源的（NAS 和 Office 365 足够），我开会员就是要用它的离线功能加速下载软件和一些 ED2K 资源，鉴于目前离线加速也不怎么给力了，我应该是要像当年放弃迅雷一样放弃百度了。\n可惜还是很多用户虽然对这个功能比较在意，但是离不开百度网盘的分享资源功能的话，还是得忍受着，各种小技巧估计马上会有用户分享的，所谓道高一尺魔高一丈，互相伤害呗。还有更多的用户可能并不会关心这件事，他们只要百度网盘还能下追剧资源就无所谓了。\n如果你只是要分享一些无关紧要的小东西的话，蓝奏云（普通用户限制 100M）还是个不错的选择。\n离线下载可能真的已经死了。\n","date":"2020-04-21","description":"百度网盘 no zuo no die","tags":"百度网盘\n激励计划\n隐私\nP2P\n用户选择","title":"闲聊百度网盘的骚操作“用户激励计划”","uri":"/2020/04/snapchat-baidu-netdisk/"},{"content":"今天手机正愉快地刷着 B 站，突然发现视频卡顿，于是到电脑上打开网页测试发现 DNS 解析有问题了，解析时好时坏，就像乌龟一样。\n跑到路由器里一看 CPU 其中一个核心居然吃满了，看了日志发现大量相同的记录：\n1  dnsmasq[253]: Maximum number of concurrent DNS queries reached (max: 150)\r  查看路由器流量分析，QNAP NAS 的 DNS 请求流量居然有好几个 GB，SSH 连上路由器，top 命令查看 ksoftirqd/0 和 kworker 占用极高，也难怪一个核心吃满，队列阻塞得一塌糊涂了。\n为了验证是 NAS 的问题，把网线拔了，果然路由器的核心占用马上就降下来了。\n问题是确定 NAS 引起的了，于是开始全网搜索解决方案，虽然找到了一些同样症状的帖子，但是基本也没什么用。\n尝试了停用 NAS 所有应用、将 NAS 从 DHCP 改为固定、重启 NAS、重置路由器、指定内网 DNS 等各种骚操作依旧不行。\n然后在各种外网论坛里翻阅，终于决定从 NAS 的 dnsmasq 服务入手。\n找到 /etc/dnsmasq.conf /etc/resolv.conf /etc/resolv.dnsmasq 三个配置文件，看到 127.0.1.1 就觉得很奇怪，顺手把它改成 127.0.0.1，然后奇迹就出现了，路由器 CPU 核心的占用马上降下来了。\n附上最终折腾的解决方案：\n1 2 3 4 5 6 7 8  # /etc/dnsmasq.conf 找到下面内容所在行注释掉\r#listen-address\r# /etc/resolv.conf 把 127.0.1.1 改成 127.0.0.1\rnameserver 127.0.0.1\r# /etc/resolv.dnsmasq 把 127.0.1.1 改成 127.0.0.1\rnameserver 127.0.0.1\r  ","date":"2020-04-19","description":"","tags":"威联通\nQNAP\n华硕\n路由器\ndnsmasq\nksoftirqd\nkworker","title":"解决华硕路由器 CPU 核心占用 100% 问题的崎岖之路","uri":"/2020/04/asus-router-cpu-high-occupancy-fixed/"},{"content":"Code Server 3.x 版本发布也有几周了，最新版本 3.1.1 看起来应该可用度比较高了，于是就打算升级了。\n根据作者发布的注意事项来看，3.x 与 2.x 最大的不同就是不再打包成单文件了。\n信息  We\u0026rsquo;re still working on arm64 builds (Travis appears to swallow the output and then terminates the build because there\u0026rsquo;s no output).\nV3 has some significant changes that will need to be accounted for in your scripts.\n  We use semantic versioning now. The VS Code version will no longer be included in the tag or the release file name.\n  Releases are now loose files and are no longer packed into a single binary so be sure to move the entire directory. Inside the directory is an entry script code-server that will launch with the bundled Node.\n  If you want to do something like put the entry script in /usr/bin and the code-server files in /usr/lib we recommend you use a symlink: ln -s /usr/lib/code-server/code-server /usr/bin/code-server.\n  You can also run code-server with your own Node binary instead of the bundled one: node /path/to/code-server/out/node/entry.js.\n  V2 cannot update to V3 automatically due to the structural changes so you’ll need to manually download and restart code-server in order to update.\n  If you want to build or develop please check out https://github.com/cdr/code-server/blob/3.0.0/doc/CONTRIBUTING.md as the steps have changed.\n    首先停止运行 2.x 版本进程，删掉开机脚本和计划任务。\n然后把最新的 release 下载下来解压到 NAS 上运行：\n1 2 3 4 5 6 7 8  export SERVICE_URL=https://marketplace.visualstudio.com/_apis/public/gallery\rexport ITEM_URL=https://marketplace.visualstudio.com/items\r# 以上两行是将编辑器的商店地址替换成微软官方的，享有比项目商店更多的插件\r./code-server --auth none --host \u0026lt;nas-ip or host name\u0026gt; --cert \u0026lt;cert\u0026gt; --cert-key \u0026lt;cert key\u0026gt; --user-data-dir \u0026lt;user data directory\u0026gt; --extensions-dir \u0026lt;extensions directory\u0026gt; \u0026amp;\r# 3.x版本需要指定 host，运行在 localhost 无法通过局域网或互联网访问\r# --user-data-dir 和 --extensions-dir 是将 2.x 的用户数据和插件导入，不需要的话可以省略\r# 不需要 ssl 部署的话，证书选项也可以关闭\r# 程序默认运行在 8080 端口，可以通过 --port 选项指定为其他端口\r  另存为 shell 文件后，将它加入开机脚本和计划任务，重启 NAS 就可以了。\n除了使用开机脚本和计划任务之外，也可以选择将项目打包成威联通可以直接安装的 qpkg 程序包。\n首先从 App Center 手动安装开发工具 QDK，项目地址：https://github.com/qnap-dev/QDK 安装包：https://download.qnap.com/QPKG/QDK/QDK_2.3.10.zip \n安装完成以后，SSH 连接到 NAS，测试安装是否成功：\n1 2  qbuild -V\r# 返回信息：qbuild 2.3.10 表示安装成功\r  创建项目，名字随便取，比如 codeserver：\n1  qbuild --create-env codeserver\r  查看 codeserver 目录文件结果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  │ build_sign.csv\r│ package_routines\r│ qpkg.cfg\r│\r├─arm-x19\r├─arm-x31\r├─arm-x41\r├─arm_64\r├─config\r├─icons\r├─shared\r│ codeserver.sh\r│\r├─x86\r├─x86_64\r└─x86_ce53xx\r  arm 以及 x86 开头的目录是存放相应架构的文件，shared 目录是存放所有架构通用的文件，如果不需要同时开发跨架构的程序，可以直接删除所有架构对应的目录：\n1 2  cd codeserver\rrm -rf ./arm* \u0026amp; rm -rf ./x86* \u0026amp; rm -rf ./config\r  警告\n使用 rm -rf 删除命令时注意路径无误，避免删除错误导致系统崩坏  修改配置信息 qpkg.cfg：\n1 2 3 4 5 6 7  QPKG_DISPLAY_NAME=\u0026#34;Code Server\u0026#34;\rQPKG_SERVICE_PORT=\u0026#34;8080\u0026#34;\rQPKG_WEBUI=\u0026#34;/\u0026#34;\rQPKG_WEB_PORT=\u0026#34;8080\u0026#34;\rQPKG_WEB_SSL_PORT=\u0026#34;8080\u0026#34;\rQPKG_VOLUME_SELECT=\u0026#34;3\u0026#34;\rQPKG_VISIBLE=\u0026#34;2\u0026#34;\r  端口可以改成你需要让程序运行的端口，前面提到过默认是 8080，不需要配置 ssl 证书的话，QPKG_WEB_SSL_PORT 不修改，其他的设置保持默认即可。\n解压最新 release 的 code-server，目录结构大致如下：\n1 2 3 4 5 6 7 8 9 10 11 12  ├─dist\r├─lib\r├─node_modules\r├─out\r├─src\r├─code-server\r├─LICENSE.txt\r├─node\r├─package.json\r├─README.md\r├─ThirdPartyNotices.txt\r└─yarn.lock\r  将所有文件复制到项目新建 /shared/bin/ 目录下：\n1 2  mkdir ./shared/bin\rcp -rf \u0026lt;code-server目录绝对路径\u0026gt;/* ./shared/bin\r  配置初始化脚本，其他的代码保持默认即可：\n1  vi ./shared/codeserver.sh\r  点击查看代码  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  case \u0026#34;$1\u0026#34; in\rstart)\rENABLED=$(/sbin/getcfg $QPKG_NAME Enable -u -d FALSE -f $CONF)\rif [ \u0026#34;$ENABLED\u0026#34; != \u0026#34;TRUE\u0026#34; ]; then\recho \u0026#34;$QPKG_NAMEis disabled.\u0026#34;\rexit 1\rfi\rexport SERVICE_URL=https://marketplace.visualstudio.com/_apis/public/gallery\rexport ITEM_URL=https://marketplace.visualstudio.com/items\rcd $QPKG_ROOT/bin\r./code-server --host \u0026lt;nas-ip or host name\u0026gt; --auth none \u0026amp;\r;;\rstop)\rkillall -9 code-server\r;;\rrestart)\r$0 stop\r$0 start\r;;\r*)\recho \u0026#34;Usage: $0{start|stop|restart}\u0026#34;\rexit 1\resac\rexit 0\r    注意\n前面 qpkg.cfg 有修改过端口的话，这里注意修改为同样的端口  如果还需要自定义图标的话，设计 3 个图标文件存放到 icons 目录：\n1 2 3  codeserver.gif 64×64 px 彩色\rcodeserver_80.gif 80×80 px 彩色\rcodeserver_gray.gif 64×64 px 灰色 App Center 未启用状态时显示\r  在项目根目录运行下面的命令构建安装包，完成后从 App Center 手动安装即可：\n1  qbuild\r  以 Web App 形式运行从外观上看和本地的 vs code 也没什么区别了\n","date":"2020-04-17","description":"","tags":"威联通\nQNAP\nCode Server\nNAS\nVS Code","title":"威联通：升级 Code Server 编辑器 3.x","uri":"/2020/04/upgrade-code-server-to-v3/"},{"content":"DPlayer 是一款支持弹幕的 HTML5 视频播放器，支持 HLS、FLV、MPEG DASH、WebTorrent 和其他自定义流媒体，支持弹幕、截图、热键、清晰度切换、预览图、字幕等多种功能。\n\u0026nbsp;前言 说起来 LoveIt 这款主题的音乐播放器用的是 APlayer 和 MetingJS，所以我在想何不引入 APlayer 作者的另一个项目 DPlayer 视频播放器来替换掉 HTML5 简陋的默认播放器呢？\n说明\n基于 DPlayer 1.25.0，HLS 0.13.2，flv.js 1.5.0 实现  \u0026nbsp;引入 css 和 js 新建 LoveIt/assets/lib/dplayer 文件夹，将下面的 css 和 js 文件下载保存在此位置：\n1 2 3 4  https://cdn.jsdelivr.net/npm/hls.js@0.13.2/dist/hls.min.js\rhttps://cdn.jsdelivr.net/npm/flv.js@1.5.0/dist/flv.min.js\rhttps://cdn.jsdelivr.net/npm/dplayer@1.25.0/dist/DPlayer.min.css\rhttps://cdn.jsdelivr.net/npm/dplayer@1.25.0/dist/DPlayer.min.js\r  修改 LoveIt/layouts/partials/assets.html，加入以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  {{- /* Video */ -}}\r{{- if ne .Site.Params.DPlayer false -}}\r{{- if $scratch.Get \u0026#34;video\u0026#34; -}}\r{{- /* DPlayer */ -}}\r{{- with $CDN.dplayerCSS -}}\r{{- slice . | $scratch.Add \u0026#34;linkCDN\u0026#34; -}}\r{{- else -}}\r{{- slice \u0026#34;lib/dplayer/DPlayer.min.css\u0026#34; | $scratch.Add \u0026#34;linkLocal\u0026#34; -}}\r{{- end -}}\r{{- with $CDN.hlsJS -}}\r{{- slice . | $scratch.Add \u0026#34;scriptCDN\u0026#34; -}}\r{{- else -}}\r{{- slice \u0026#34;lib/dplayer/hls.min.js\u0026#34; | $scratch.Add \u0026#34;scriptLocal\u0026#34; -}}\r{{- end -}}\r{{- with $CDN.flvJS -}}\r{{- slice . | $scratch.Add \u0026#34;scriptCDN\u0026#34; -}}\r{{- else -}}\r{{- slice \u0026#34;lib/dplayer/flv.min.js\u0026#34; | $scratch.Add \u0026#34;scriptLocal\u0026#34; -}}\r{{- end -}}\r{{- with $CDN.dplayerJS -}}\r{{- slice . | $scratch.Add \u0026#34;scriptCDN\u0026#34; -}}\r{{- else -}}\r{{- slice \u0026#34;lib/dplayer/DPlayer.min.js\u0026#34; | $scratch.Add \u0026#34;scriptLocal\u0026#34; -}}\r{{- end -}}\r{{- end -}}\r{{- end -}}\r  如果需要设置 CDN，在 config.toml 里设置，同时设置启用 DPlayer：\n1 2 3 4 5 6 7 8 9  [params]\rDPlayer = true\r# CSS 和 JS 文件的 CDN 设置\r [params.cdn]\r# HLS@0.13.2 flv.js@1.5.0 DPlayer@1.25.0 https://github.com/video-dev/hls.js https://github.com/bilibili/flv.js https://github.com/MoePlayer/DPlayer\r hlsJS = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/hls.js@0.13.2/dist/hls.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;\rflvJS = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/flv.js@1.5.0/dist/flv.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;\rdplayerCSS = \u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/dplayer@1.25.0/dist/DPlayer.min.css\u0026#34;\u0026gt;\u0026#39;\rdplayerJS = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/dplayer@1.25.0/dist/DPlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;\r  注意\n务必保证 hls 和 flv.js 在 DPlayer 之前引入  \u0026nbsp;定义 shortcode 在 LoveIt/layouts/shortcodes/ 下新建 video.html 文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  {{- $scratch := .Page.Scratch.Get \u0026#34;scratch\u0026#34; -}}\r{{- if .IsNamedParams -}}\r{{- if .Get \u0026#34;url\u0026#34; -}}\r\u0026lt;div id=\u0026#34;{{ .Get `id` }}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;script\u0026gt;\rfunction loadDPlayer(){\rlet dp = new DPlayer({\rcontainer: document.getElementById({{ .Get `id` }}),\rautoplay: {{ .Get `autoplay` | default false }},\rtheme: {{ .Get `theme` | default `#b7daff` }},\rloop: {{ .Get `loop` | default false }},\rlang: {{ .Get `lang` | default `zh-cn` }},\rscreenshot: {{ .Get `screenshot` | default true }},\rhotkey: {{ .Get `hotkey` | default true }},\rpreload: {{ .Get `preload` | default `auto` }},\rlogo: {{ .Get `logo` }},\rvolume: {{ .Get `volume` | default 0.7 }},\rmutex: {{ .Get `mutex` | default true }},\rvideo: {\rurl: {{ .Get `url` }},\rpic: {{ .Get `pic` }},\rthumbnails: {{ .Get `thumbnails` }},\rtype: {{ .Get `type` | default `auto` }},\r},\rsubtitle: {\rurl: {{ .Get `sub` }},\rtype: {{ .Get `subtype` | default `webvtt` }},\rfontSize: {{ .Get `fontsize` | default `20px` }},\rbottom: {{ .Get `bottom` | default `10%` }},\rcolor: {{ .Get `color` | default `#b7daff` }},\r},\r});\r}\rdocument.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, loadDPlayer, !1);\r\u0026lt;/script\u0026gt;\r{{- end -}}\r{{- end -}}\r{{- $scratch.Set \u0026#34;video\u0026#34; true -}}\r  代码删除了 DPlayer 预设的自定义右键菜单、进度条提示点和弹幕参数。目前没有找到好用的弹幕接口，自建的话，静态博客会公开接口 API，免费的服务额度有限，付费的估计承受不起。\n在 LoveIt/assets/css/_partial/_single/ 下新建 _video.scss 样式：\n1 2 3 4 5 6 7  .dplayer {\rposition: relative;\rwidth: 100%;\rheight: auto;\rmargin: 3% auto;\rtext-align: center;\r}\r  在 LoveIt/assets/css/_page/_single.scss 以下位置引入新建的 _video.scss：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  @import \u0026#34;../_partial/_single/code\u0026#34;;\r@import \u0026#34;../_partial/_single/instagram\u0026#34;;\r@import \u0026#34;../_partial/_single/admonition\u0026#34;;\r@import \u0026#34;../_partial/_single/echarts\u0026#34;;\r@import \u0026#34;../_partial/_single/mapbox\u0026#34;;\r@import \u0026#34;../_partial/_single/music\u0026#34;;\r@import \u0026#34;../_partial/_single/bilibili\u0026#34;;\r@import \u0026#34;../_partial/_single/bilibilibv\u0026#34;;\r@import \u0026#34;../_partial/_single/qqvideo\u0026#34;;\r@import \u0026#34;../_partial/_single/iqiyi\u0026#34;;\r@import \u0026#34;../_partial/_single/youku\u0026#34;;\r@import \u0026#34;../_partial/_single/sohu\u0026#34;;\r@import \u0026#34;../_partial/_single/acfun\u0026#34;;\r@import \u0026#34;../_partial/_single/video\u0026#34;;\r  \u0026nbsp;使用方法    参数名 默认值 描述     id 必须 播放器父元素唯一 id，用于处理同页面多个播放器，同页面不可重复   url 必须 视频直链地址   pic 可选 视频封面图片   thumbnails 可选 视频缩略图，可以使用 DPlaye","date":"2020-04-14","description":"本文介绍如何将 HTML5 默认视频播放器替换成 DPlayer","tags":"Hugo\nLoveIt\n播放器\nDPlayer","title":"Hugo 篇三：添加 DPlayer 播放器","uri":"/2020/04/hugo-loveit-with-dplayer-supported/"},{"content":"Hugo LoveIt 主题虽然支持了 bilibili 视频的插入，再加上 hugo 自带的 youtube 和 vimeo 视频，但是也还是有点少。没有国内视频三大巨头（优酷现在掉队有点严重，可能名不副实了）似乎有些遗憾。又加上最近 B 站去 av 化，正好看到 LoveIt 项目的 issue#208 中有人提到这一点，我就试着看看能不能改改，并加点东西进去。\n\u0026nbsp;前言 以某位咕咕咕 up 主的最新视频为例，旧 av 时代插入 B 站视频是下面这个样子的\n1 2 3 4 5 6  视频地址：https://www.bilibili.com/video/av882566744\r插入方式：\r{{\u0026lt; bilibili 882566744 \u0026gt;}}\r或者\r{{\u0026lt; bilibili av=882566744 \u0026gt;}}\r  而新 bv 时代 B 站视频默认只显示 bv 号了，用老方法插入会失败。当然目前你可以用浏览器扩展或者其他方法获取到 av 号来插入，但是总有一天会迎来全面 bv 的时代。那么就需要我们手动来改造了。\n\u0026nbsp;BV 大改造 看了下 LoveIt 主题的结构，发现 bilibili shortcodes 的引入和三个文件有关：\n1 2 3  themes/LoveIt/layouts/shortcodes/bilibili.html\rthemes/LoveIt/assets/css/_partial/_single/_bilibili.scss\rthemes/LoveIt/assets/css/_page/_single.scss\r  \u0026nbsp;分享代码 首先来看 bilibili.html：\n1 2 3 4 5 6 7  \u0026lt;div class=\u0026#34;bilibili\u0026#34;\u0026gt;\r{{- if .IsNamedParams -}}\r\u0026lt;iframe src=\u0026#34;//player.bilibili.com/player.html?aid={{ .Get `av` }}\u0026amp;page={{ .Get `p` | default 1 }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\r{{- else -}}\r\u0026lt;iframe src=\u0026#34;//player.bilibili.com/player.html?aid={{ .Get 0 }}\u0026amp;page={{ .Get 1 | default 1 }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\r{{- end -}}\r\u0026lt;/div\u0026gt;\r  不难发现，其实就是对官方 iframe 分享链接改造。\n1  player.bilibili.com/player.html?aid=[av号]\u0026amp;page=[分p号]\r  那么拿到 bv 时代的官方分享链接就可以了。\n 获取的原始分享链接是下面这个样子的：\n1  \u0026lt;iframe src=\u0026#34;//player.bilibili.com/player.html?aid=882566744\u0026amp;bvid=BV1YK4y1C7CU\u0026amp;cid=172274931\u0026amp;page=1\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt;\r  看起来目前官方还是 av 和 bv 并行的，为了不破坏原来的博文 av 时代视频的效果，我们新建一个 bilibilibv.html 文件：\n1 2 3 4  \u0026lt;div class=\u0026#34;bilibilibv\u0026#34;\u0026gt;\r\u0026lt;iframe src=\u0026#34;//player.bilibili.com/player.html?bvid={{ .Get 0 }}\u0026amp;page={{ .Get 1 | default 1 }}\u0026#34; scrolling=\u0026#34;no\u0026#34;\rborder=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\r\u0026lt;/div\u0026gt;\r  为了方便也不要搞 av 时代的两种使用方法了，直接上最简单的一种方式。\n\u0026nbsp;修改样式 到此为止，其实我们的 bv 时代 shortcodes 已经可以用了，但是没有修改样式，不管从外观还是排版来看都是很丑的。\n回到开头提到的三个文件之二，新建一个 _bilibilibv.scss 的文件，就是改个类名，复制了 av 时代的样式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  .bilibilibv {\rposition: relative;\rwidth: 100%;\rheight: 0;\rpadding-bottom: 75%;\rmargin: 3% auto;\rtext-align: center;\riframe {\rposition: absolute;\rwidth: 100%;\rheight: 100%;\rleft: 0;\rtop: 0;\r}\r}\r  \u0026nbsp;引入样式 刚刚新建的样式文件还需要用到开头的三个文件之三来引入，修改 _single.scss 如下：\n1 2 3 4 5 6  @import \u0026#34;../_partial/_single/code\u0026#34;;\r@import \u0026#34;../_partial/_single/instagram\u0026#34;;\r@import \u0026#34;../_partial/_single/admonition\u0026#34;;\r@import \u0026#34;../_partial/_single/echarts\u0026#34;;\r@import \u0026#34;../_partial/_single/bilibili\u0026#34;;\r@import \u0026#34;../_partial/_single/bilibilibv\u0026#34;;\r  在引入样式的地方，新增一行 @import \u0026quot;../_partial/_single/bilibilibv\u0026quot;;，到此大功告成。\n使用方法：\n1  {{\u0026lt; bilibilibv BV1YK4y1C7CU \u0026gt;}}\r    小技巧\n其他视频网站的引入也是如此，先获取到官方的 iframe 分享链接，然后改造三个文件即可。  \u0026nbsp;后记 在寻找各视频网站官方分享链接的过程中，意外发现了 TGideas 这个团队的内容，作为一个小白感觉就像在沙漠中找到了一片绿洲。\n https://tgideas.qq.com/doc/index.html https://tgideas.qq.com/intro.html  如果需要更多视频网站 shortcodes 的成品的话，可以去我 fork 的项目地址，切换到 develop 分支查看。目前支持 爱奇艺，腾讯视频，优酷，搜狐视频，Acfun。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  爱奇艺和搜狐不能直接用播放页面地址的视频 id，使用页面的分享按钮获取完整 iframe 地址\r爱奇艺是 tvid 部分，搜狐是 bid 部分。\r用法示例：\r{{\u0026lt; iqiyi 3060730600 \u0026gt;}}\r{{\u0026lt; qqvideo r0029muuhfj \u0026gt;}}\r{{\u0026lt; youku XMzk1NjM1MjAw \u0026gt;}}\r{{\u0026lt; sohu 90742150 \u0026gt;}}\r{{\u0026lt; acfun ac14349183 \u0026gt;}}\r  0202年还在使用 flash 技术的视频网站，祝你们新年快乐。\n","date":"2020-04-02","description":"本文介绍如何为 Hugo LoveIt 主题添加更多 shortcodes","tags":"Hugo\nshortcodes\n腾讯视频\n爱奇艺\n优酷","title":"Hugo 篇二：为 LoveIt 主题添加更多视频分享 shortcodes","uri":"/2020/04/hugo-loveit-with-more-video-share-shortcodes-supported/"},{"content":"上一篇博文介绍了 nps 内网穿透服务，虽然拥有 Web 配置界面，但对于新手来说可能还是略显不友好，毕竟也还需要拥有一台公网服务器。那么今天要介绍的两款产品或者说服务绝对算得上是开箱即用，老少皆宜。\n💮 蒲公英 X1 蒲公英 X1 是贝锐科技公司旗下一款采用 Cloud VPN 技术的企业级智能组网路由器。没错，它是一台路由器。而贝锐科技旗下还拥有花生壳、向日葵等知名的产品。以前上大学的时候用过 2233.org 的二级域名 ddns 服务，印象中好像是这家公司的早期产品。\n   蒲公英 X1 简要参数\n 尺寸：70 毫米 X 70 毫米 X 18 毫米 处理器（CPU）：MT7628A 内存（RAM）： 64MB 闪存（FLASH）：16MB 接口：Micro USB 电源接口 × 1，100 Mbps 网口 × 1，USB-A × 1 无线网络标准：2.4GHz 300Mbps：IEEE 802.11 b/g/n   日常价格 ￥ 108，一般活动价格 ￥ 98，我是 ￥ 78 拿下的。看参数想要拿它做主路由我觉得还是算了吧，反正我看上的也只是它的旁路组网功能，即不改变现有的家庭网络结构直接通过组网实现专属内网穿透隧道。\n   电源线插电，通过网线直接将 X1 LAN 口与主路由 LAN 口连接（DHCP 功能需开启）， 打开 https://pgybox.oray.com/，通过 SN 码登录（可在路由器背面查看），默认密码是 admin 进入蒲公英管理平台，路由器首次使用需进行初始化，输入对应信息点击提交 注册 oray 账号，在智能组网栏将 X1 绑定到账号下面 点击“我要组网”，跳转至蒲公英官网管理页面，点击“立即创建网络” 填写网络名称，选择网络类型；然后添加网络成员（目前只有一台 X1），点击完成 在已经创建好了的蒲公英 VPN 网络中，点击“旁路设置” 进入旁路路由设置页面，点击“添加旁路路由” 选择 X1 为旁路路由，目标地址填写主路由所在网段，比如 192.168.1.0/24，表示网段是 192.168.1.0,子网掩码为:255.255.255.0，若子网掩码的位数不是 24 位，请根据实际情况填写 PC 或手机端安装相应的蒲公英客户端，通过 oray 账号登录轻松组网，在外面通过 4G/5G 移动网络或者公司网络就可以直接访问内网的资源了。 如果你运气还不错的话，两边的 NAT 类型还算给力的话，有可能打通 p2p 点对点隧道，无需通过蒲公英的公网服务器转发数据，实现高速访问。  注意\n 为了提高 P2P 连通率，建议开启主路由的 UPNP 功能 X1 提供终身免费的标准版转发服务，带宽是 2M，如果需要更高的转发带宽可以花钱购买，每个客户端需要额外费用   更多内容参考官方文档\n🌏 KSA KAS 是安全社区看雪论坛开发的一款内网穿透软件，目前提供 Windows，MacOS 和 Linux (x86, x64, arm64,mipsel)的客户端。KSA 的服务端和客户端集成在一个可执行文件之中，真正做到了无需配置，点击就用。\n💻 Windows 双击运行可执行文件 ksa_win.exe，左半部分 KSA 服务端已经默认生成好 KSA ID 和密码，记住这个 KSA ID 和密码即可。点击启动服务开始运行服务端：\n 💻 MacOS 与 Windows 类似，左侧是服务端，右侧是客户端，右侧的“远程接入到 KSA 服务端”中输入 KSA ID 和密码，点击“接入服务端”即可。接入成功后如下图所示：\n 💻 Linux 解压之后，使用 sudo chmod +x ksa*命令，给 ksa 软件添加可执行权限，然后启动即可。\n1 2  chmod +x ksa*\r./ksa_x64\r  服务端即会开启并运行，KSA ID 和 PSK 都会出现。也可以查看同目录下的 ksa.log 文件，启动日志已经写入到该文件中。\n Linux 客户端需要先配置 ksa.conf 文件。\n首先请确保没有任何 ksa 进程在执行，有则先关闭。以 x64 版本为例，killall -9 ksa_x64 杀死进程。\n将被访问设备服务端生成的 KSA ID 和 PSK 对应填到 [uid] 和 [psk] 后面并取消注释 # 号，使其生效。最终效果如下图：\n 配置完成之后，运行 ./ksa_x64 来启动即可。\n连接成功之后服务端所在的局域网的 IP（我们假设为 192.168.1.*），在客户端机器上都可以直接访问了，比如内网网络邻居也可以打开：\n 注意\n 此产品尚处于内测阶段，请勿在生产环境中部署，由此带来的一切后果，看雪不予承担。 KSA ID 和密码仅作为客户端与服务端连接时互相校验的用途，看雪服务器并不保存 KSA ID 和密码。 初次使用时 Windows 平台会弹出安装驱动，请允许安装驱动。 MacOS 平台可能会要求输入管理员密码。 远程接入分为 p2p 直连和 NAT 中转两种模式。 KSA 会优先选择 p2p 直连的模式，在该模式下服务端与客户端直接连接，速度快，不限量。 在 p2p 尝试失败的情况下，KSA 会启用 NAT 中转模式，在该模式下服务端与客户端之间的连接会经过看雪服务器中转，所有流量使用 AES-256-CFB 模式全局加密，看雪服务器不会保存流量、也无法解密。 在 NAT 中转模式，由于看雪服务器资源有限，会进行一定的限速限量措施，内测阶段会根据流量进行动态调整，恕不另行告知。   📝 后记 总的来说，这两款产品对于新手来说是非常友好的，算不上折腾。如果注重稳定有移动端需求，提供商业服务的蒲公英 X1 是比较适合的。如果需求 Linux 和 MacOS 的使用，那么 KSA 是比较合适的。这里本人是比较期待 KSA 后续能够开源中转服务器上的服务端。\n部分内容引用：https://ksa.kanxue.com/index-down.htm\n","date":"2020-03-27","description":"本文介绍蒲公英 X1 和 KSA 如何打通外网访问内网资源","tags":"内网穿透\n威联通\n蒲公英\nksa\n贝锐科技","title":"威联通：内网穿透服务之蒲公英 X1 和 KSA","uri":"/2020/03/intranet-penetration-with-pgyx1-or-ksa/"},{"content":"nps 是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持 tcp、udp 流量转发，可支持任何 tcp、udp 上层协议（访问内网网站、本地支付接口调试、ssh 访问、远程桌面，内网 dns 解析等等……），此外还支持内网 http 代理、内网 socks5 代理、p2p 等，并带有功能强大的 web 管理端。\n\u0026nbsp;前言 内网穿透解决方案有不少，开源的比如 nps、frp、lanproxy、ngrok 和 zerotier 等，现成的商业服务有贝锐科技提供的花生壳、蒲公英之类的产品。个人现在同时部署的有三款产品，nps、ksa（看雪论坛的服务）和蒲公英 X1。今天要介绍的是这款 nps，自带 web 管理界面，支持 p2p 连接，支持数据压缩传输。\n说明\n本文基于以下软硬件系统测试，不能完全保证其他系统的兼容性。\n QNAP TS-453Bmini 2+8G 内存 QTS 4.4.1.1216 nps 0.26.5 Windows 10 1909 64 位 专业版和家庭版   \u0026nbsp;背景  做微信公众号开发、小程序开发等\u0026mdash;-\u0026gt; 域名代理模式 想在外网通过 ssh 连接内网的机器，做云服务器到内网服务器端口的映射，\u0026mdash;-\u0026gt; tcp 代理模式 在非内网环境下使用内网 dns，或者需要通过 udp 访问内网机器等\u0026mdash;-\u0026gt; udp 代理模式 在外网使用 HTTP 代理访问内网站点\u0026mdash;-\u0026gt; http 代理模式 搭建一个内网穿透 ss，在外网如同使用内网 vpn 一样访问内网资源或者设备\u0026mdash;-\u0026gt; socks5 代理模式  \u0026nbsp;特点  协议支持全面，兼容几乎所有常用协议，例如 tcp、udp、http(s)、socks5、p2p、http 代理\u0026hellip; 全平台兼容(linux、windows、macos、群辉等)，支持一键安装为系统服务 控制全面，同时支持服务端和客户端控制 https 集成，支持将后端代理和 web 服务转成 https，同时支持多证书 操作简单，只需简单的配置即可在 web ui 上完成其余操作 展示信息全面，流量、系统信息、即时带宽、客户端版本等 扩展功能强大，该有的都有了（缓存、压缩、加密、流量限制、带宽限制、端口复用等等） 域名解析具备自定义 header、404 页面配置、host 修改、站点保护、URL 路由、泛解析等功能 服务端支持多用户和用户注册功能  \u0026nbsp;安装 nps 分为服务端和客户端。服务端安装需要一台公有云服务器，比如白嫖的腾讯云、阿里云的学生主机。客户端使用分为两部分：被访问端和访问端，比如内网的 TS 453Bmini 即被访问端，在外使用的笔记本或者单位的台式机即访问端。\n项目地址：https://github.com/ehang-io/nps\nrelease 页面 TS 453Bmini 对应版本服务端和客户端。\n \u0026nbsp;服务端 在云服务器上执行以下命令：\n1 2 3  wget https://github.com/ehang-io/nps/releases/download/v0.26.5/linux_amd64_server.tar.gz\rmkdir nps \u0026amp;\u0026amp; tar -zxvf linux_amd64_server.tar.gz -C nps\rcd nps \u0026amp;\u0026amp; ./nps install\r  nps 已经成功安装到系统服务，可以使用 sudo nps start|stop|restart 来启动|停止|重启服务。\n建议修改配置文件的 web_password、web_username 和 auth_crypt_key，即 web 界面管理密码、web 界面管理账号和 16 位 aes 加密密钥。\n如果客户端需要使用 p2p 模式，可以将 p2p_ip 和 p2p_port 启用。\n1  vi /etc/nps/conf/nps.conf\r  服务端配置文件说明：\n   名称 含义     web_port web 管理端口   web_password web 界面管理密码   web_username web 界面管理账号   web_base_url web 管理主路径,用于将 web 管理置于代理子路径后面   bridge_port 服务端客户端通信端口   https_proxy_port 域名代理 https 代理监听端口   http_proxy_port 域名代理 http 代理监听端口   auth_key web api 密钥   bridge_type 客户端与服务端连接方式 kcp 或 tcp   public_vkey 客户端以配置文件模式启动时的密钥，设置为空表示关闭客户端配置文件连接模式   ip_limit 是否限制 ip 访问，true 或 false 或忽略   flow_store_interval 服务端流量数据持久化间隔，单位分钟，忽略表示不持久化   log_level 日志输出级别   auth_crypt_key 获取服务端 authKey 时的 aes 加密密钥，16 位   p2p_ip 服务端 Ip，使用 p2p 模式必填   p2p_port p2p 模式开启的 udp 端口   pprof_ip debug pprof 服务端 ip   pprof_port debug pprof 端口    保存配置文件后重启 nps\n1  nps restart\r  如果以后要升级，首先停止 nps，再升级。\n1 2  nps stop\rnps-update update\r  到此，服务端的安装和基本配置已经完成，接下去就是客户端的配置使用了。\n注意\n阿里云等服务器可能需要额外在安全组配置中打开 nps 需要用到的端口，比如 TCP 8024/8080/8001/8003/8004，UDP 6000~6002。  \u0026nbsp;客户端 \u0026nbsp;Web 配置 nps 支持配置文件和无配置文件使用，这里介绍无配置文件，所有配置在 web 端设置。\n登录 web 界面（云服务器 ip:8080），默认用户名：admin，默认密码：123。如果之前安装服务端时有修改web_password和web_username，请自行修改。\n 添加一个客户端，根据需求进行配置，无论访问端使用何种模式，这一步都是必须的设置。\n 如果不需要客户端配置文件连接，可以按照如下设置：\n  新增保存后，点击客户端记录前面的 + 号，主要关注客户端命令这一行，稍后会用到。顺带可以看下配置是否正确，如果需要修改可以点击选项下面的编辑按钮。\n 接下来创建一个 p2p 连接，在刚创建的客户端查看下面点击隧道，新增一个 p2p 隧道。\n 模式选择 p2p，目标填写被访问内网机器的 IP:端口（比如 192.168.50.100:8080），唯一标识密钥随便填。\n注意\n如果新建多个 p2p 或私密代理隧道，唯一标识密钥不能重复。  新增保存后，点击隧道记录前面的 + 号，同样关注访问端命令这一行。\n到此，web 端配置结束，如果需要更多隧道模式，参考官方文档。\n\u0026nbsp;访问使用 内网 TS 453Bmini 上将 npc 客户端安装到系统服务，查看客户端命令：\n1 2 3 4  wget https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_amd64_client.tar.gz\rmkdir npc \u0026amp;\u0026amp; cd npc\r./npc install -server=云服务器IP:8024 -vkey=客户端的密钥 -type=tcp\rnpc start\r  到 web 客户端界面查看连接一栏中客户端是否在线。\n接下来配置访问端，以 Windows 版本客户端为例。\n解压下载下来的压缩包 windows_amd64_client.tar.gz，在目录下管理员运行 powershell 或 cmd 执行以下命令将 npc 安装到系统服务：\n1  ./npc.exe install\r  编写批处理文件控制访问连接，或者直接在 cmd 中直接运行：\n1  npc -server=云服务器IP:8024 -vkey=客户端的密钥 -type=tcp -password=隧道密钥 -target=内网机器IP:端口\r  注意\n如果出现 connect to the target failed, maybe the nat type is not support p2p错误说明客户端和访问端的 NAT 类型不支持 p2p 隧道连接。\n如果出现 new conn, P2P can not penetrate successfully, traffic will be transferred through the server，说明 p2p 隧道没有成功建立，数据通过云服务器转发。\n  如果能成功打通 p2p 隧道，就可以通过 127.0.0.1:2000 以 p2p 高速访问内网服务了。\n技巧\nNAT 类型检测\n1  npc nat -stun_addr=stun.stunprotocol.org:3478\r  如果 p2p 双方都是 Symmetric Nat，肯定不能成功，其他组合都有较大成功率。stun_addr 可以指定 stun 服务器地址。\n  \u0026nbsp;后记 这款内网穿透工具的功能还是很丰富的，其他隧道模式可以参考官方文档研究下。\n","date":"2020-03-24","description":"本文介绍如何用NPS实现威联通内网穿透","tags":"内网穿透\n威联通\nnps\np2p","title":"威联通：内网穿透解决方案之自建NPS服务","uri":"/2020/03/install-nps-on-qnap-nas/"},{"content":" \u0026nbsp;前言 静态博客系统有很多，为什么选择 Hugo 呢？\n  独立二进制文件，免去各种复杂的环境配置，部署简单快速 基于 Markdown 写作，学习成本低 免费开源，渲染速度快，主题扩展丰富   说明\n本文基于以下软硬件系统测试，不能完全保证其他系统的兼容性。\n QNAP TS-453Bmini 2+8G 内存 QTS 4.4.1.1216 hugo_extended_0.67.1_Linux-64bit.tar.gz   \u0026nbsp;安装 警告\n任何基于实机的操作都有可能造成 QTS 系统无法挽回的错误，除非你很明确知道这条命令要做什么。  从 Hugo 选择适合 TS-453Bmini 系统的 hugo_extended_0.67.1_Linux-64bit.tar.gz 下载到 NAS。\ntar -zxvf hugo_extended_0.67.1_Linux-64bit.tar.gz解压得到 hugo 二进制文件。\n将 hugo 复制到自己认为合适的目录，并以chmod +x hugo命令赋予可执行权限。\n此时通过 hugo help 测试运行发现会报错 错误\n/lib/libstdc++.so.6: versionGLIBCXX_3.4.21\u0026rsquo; not found` \n查阅相关资料后发现 /lib/libstdc++.so.6 链接来自 /lib/libstdc++.so.6.0.20，并没有包含 GLIBCXX_3.4.21，需要将 /share/CACHEDEV1_DATA/.qpkg/CodexPack/usr/lib/x86_64-linux-gnu/libstdc++.so.6 软链接到 /lib/libstdc++.so.6.0.20，并将 hugo 加入 PATH 实现全局运行。\n1 2  ln -sf /share/CACHEDEV1_DATA/.qpkg/CodexPack/usr/lib/x86_64-linux-gnu/libstdc++.so.6 /lib/libstdc++.so.6.0.20 ln -sf /your-hugo-path/hugo /usr/local/bin/hugo   注意\n libstdc++.so.6 需要安装 CodexPack 套件，这是多媒体管理的硬件加速转码用的，一般都会装的 替换your-hugo-path为你自己的 hugo 所在目录   为避免长期运行失效，可以将上面的 shell 脚本加入开机启动和定时任务，具体请参考另一篇博文。\n注意\n当然，你也可以选择我打包的 qpkg 安装包：下载地址，密码:233so  \u0026nbsp;使用 如果使用hugo help测试运行返回如下信息，则说明 Hugo 已经成功安装。\n点击展开  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  $ hugo help hugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at https://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: check Contains some verification checks config Print the site configuration convert Convert your content to different formats env Print Hugo version and environment info gen A collection of several useful generators. help Help about any command import Import your site from others. list Listing out various types of content new Create new content for your site server A high performance webserver version Print the version number of Hugo Flags: -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026#34;config\u0026#34;) -c, --contentDir string filesystem path to content directory --debug debug output -d, --destination string filesystem path to write files to --disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date and author info to the pages -e, --environment string build environment --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for hugo --i18n-warnings print missing translations --ignoreCache ignores the cache directory -l, --layoutDir string filesystem path to layout directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noChmod don\u0026#39;t sync permission mode of files --noTimes don\u0026#39;t sync modification time of files --path-warnings print warnings on duplicate target paths etc. --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, --source string filesystem path to read files relative from --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, --verbose verbose output --verboseLog verbose logging -w, --watch watch filesystem for changes and recreate as needed Use \u0026#34;hugo [command] --help\u0026#34; for more information about a command.     \u0026nbsp;新建站点 在终端中执行依次执行以下命令\n1 2 3  hugo new site /your-site-path/your-site-name cd /your-site-path/your-site-name ls   注意\n替换your-site-path和your-site-name为你自己的目录  初始站点目录结构如下\n1 2 3 4 5 6 7 8  your-site-name 你的站点 ├─ archetypes 每一篇 markdown 博文的默认设置模板 ├─ content 站点内容，未来我们攥写博文原稿都在这里 ├─ data 存储网站的配置、数据文件 ├─ layouts 存储用来渲染 content 目录下面内容的模版文件，一般使用主题对应的 layouts ├─ static 存储图片、js、css 等静态资源文件 ├─ themes 主题样式，可以通过模板快速建立站点 └─ config.toml 站点全局配置文件   \u0026nbsp;安装主题 LoveIt 是一个简洁、优雅且高效的 Hugo 博客主题。\n它的原型基于 LeaveIt 主题 和 KeepIt 主题。\nLoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt\n你可以下载主题的 最新版本 \u0026nbsp;.zip 文件 并且解压放到 themes 目录。\n另外, 也可以直接把这个主题克隆到 themes 目录:\n1  git clone -b master https://github.com/dillonzq/LoveIt.git themes/LoveIt   或者, 初始化你的项目目录为 git 仓库, 并且","date":"2020-03-21","description":"本文介绍如何在威联通NAS上部署hugo博客系统","tags":"QNAP\nhugo\n威联通\n博客\nNAS\nLoveIt","title":"Hugo 篇一：在威联通 NAS 上生成博客并部署 Pages 服务","uri":"/2020/03/install-hugo-on-qnap-nas/"},{"content":"code-server 是基于微软 Visual Studio Code 项目打造的远程编辑器，可以运行在服务器，客户端通过浏览器访问即可使用。\n更新\n目前 code-server 已经发布 3.0 Pre-release，版本改动比较大，可以期待正式版。  \u0026nbsp;前言 说明\n本文基于以下软硬件系统测试，不能完全保证其他系统的兼容性。\n QNAP TS-453Bmini 2+8G 内存 QTS 4.4.1.1216 code-server 1.41.1 with chinese-language-pack 1.41.0   基于 docker 的 code-server 安装教程有很多，比如这一篇群晖的安装。打包好的镜像也有很多，官方的 codercom/code-server，第三方的比如 linuxserver/code-server 和 xiumu/code-server-zh-cn。另外你也可以自己打包，容器的好处确实很多，即开即用，但是我的原则就是能上实机就上实机，能瞎折腾就瞎折腾。\n废话不多说，直接开始！\n\u0026nbsp;安装 警告\n任何基于实机的操作都有可能造成 QTS 系统无法挽回的错误，除非你很明确知道这条命令要做什么。  \u0026nbsp;下载并安装中文语言包 从 code-server 项目的 Release 页面根据你的机型选择 linux-arm64 或者 linux-x86_64 下载下来，解压到 NAS 上，注意 code-server 这个文件就是我们所需的已经编译好的程序文件。\nSSH 连接到 NAS 系统，切换到 code-server 所在目录。如何开启 SSH\n首先我们先安装中文语言包插件，从 vscode官方市场 下载适配的中文语言包。目前 code-server 最新的版本是 1.41.1，我测试了 1.41.0 版本的中文语言包能够正常使用，通过浏览器抓包（F12）得到下载地址，替换相应的版本号即可构造需要版本的地址。\n1  https://marketplace.visualstudio.com/_apis/public/gallery/publishers/MS-CEINTL/vsextensions/vscode-language-pack-zh-hans/\u0026lt;version\u0026gt;/vspackage     Chinese-Language-Pack   插件安装命令\n1  ./code-server --install-extension \u0026lt;your-language-pack-path\u0026gt;   插件卸载命令\n1 2  ./code-server --uninstall-extension \u0026lt;extension-id\u0026gt; # extesion-id在/\u0026lt;your-user-path\u0026gt;/.local/share/code-server/extensions目录下面查看   注意\n更多 code-server 命令请使用帮助命令查看 code-server -h  \u0026nbsp;脚本启动 codes-erver 由于 SSH 直接启动 code-server，断开 SSH 以后会关闭，而且也需要避免重启和系统升级带来的问题，所以需要写个 shell 脚本加入计划任务和开机启动。\n启用默认级别日志，不启用 ssl 证书，不启用密码认证，默认使用 8080 端口，如果与其他服务有冲突请使用--port \u0026lt;port-number\u0026gt;自行修改。有需要可以使用--cert \u0026lt;your-cert-path\u0026gt;和--cert-key \u0026lt;your-cert-key-path\u0026gt;选项启用 ssl 证书（腾讯云有免费一年的 TrustAsia 证书），使用--auth password选项，同时设置系统环境变量export PASSWORD=\u0026quot;your-own-password\u0026quot;来设置密码认证。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #!/bin/sh # 本脚本用于管理code-server的启动、停止、重启 # 请提前安装好code-server版本对应的中文语言包，vscode官方插件市场（https://marketplace.visualstudio.com/）： # code-server --install-extension \u0026lt;your-language-pack-path\u0026gt; 安装插件 # code-server -v 查看版本 # code-server -log \u0026lt;level\u0026gt; 设置日志输出级别，默认info，一共有\u0026#39;critical\u0026#39;, \u0026#39;error\u0026#39;,\u0026#39;warn\u0026#39;, \u0026#39;info\u0026#39;, \u0026#39;debug\u0026#39;, \u0026#39;trace\u0026#39;, \u0026#39;off\u0026#39;7个级别 # 日志存储位置：\u0026lt;your-user-path\u0026gt;/.local/code-server/logs，建议定时清理 # 更多code-server命令请使用帮助 code-server -h # case \u0026#34;$1\u0026#34; in start) sudo /\u0026lt;your-code-server-path\u0026gt;/code-server --locale zh-cn --auth none \u0026amp;\u0026gt;/dev/null ;; stop) sudo killall -9 code-server \u0026amp;\u0026gt;/dev/null ;; restart) $0 stop $0 start ;; *) echo \u0026#34;Usage: $0{start|stop|restart}\u0026#34; exit 1 esac exit 0   本来想通过修改 daemon_mgr.conf 守护进程配置文件加入后台，发现重启 NAS 后会丢失用户修改的内容，还是只能通过计划任务和开机启动脚本来实现稳定运行。\nQTS 的计划任务配置文件在 /etc/config/crontab，可以按照自己的需求设置定时重启任务\n1  0 0 * * * /\u0026lt;your-shell-script-path\u0026gt;/\u0026lt;you-shell-script\u0026gt; restart \u0026amp;\u0026gt;/dev/null   crontab 命令编写可以参考此处\nQTS 自带也有 autorun.sh 开机脚本管理，虽然重启 NAS 不会丢失，但是 QTS 系统升级后会丢失，所以推荐安装第三方商店里的 BashIT 来管理。想要做到完美可以用 QDK 打包成 qpkg 安装。\n1  daemon_mgr code-server start \u0026#34;/\u0026lt;your-shell-script-path\u0026gt;/\u0026lt;you-shell-script\u0026gt; start\u0026#34; \u0026amp;\u0026gt;/dev/null   重启 NAS 后，管理脚本会自动运行 code-server，浏览器打开http://\u0026lt;your-nas-ip\u0026gt;:8080/即可使用。\n  code-server-online-in-browser   \u0026nbsp;后记 如果你的 Windows 上安装了 vscode，那么可以把 %userprofile%/.vscode/ 下面的 extensions 目录直接复制到/\u0026lt;your-user-path\u0026gt;/.local/share/code-server/下面覆盖相应的插件目录，如果插件能够兼容，启动 code-server 后就能直接使用了。（不推荐使用，避免隐形的不兼容问题）\n查看 log 来定位问题\n/\u0026lt;your-user-path\u0026gt;/.local/share/code-server/logs  搜索 issues 来解决问题\nhttps://github.com/cdr/code-server/issues  本文只是介绍编辑器的安装，不是集成开发环境的 IDE 的部署，所以能不能兼容大多数开发环境就不清楚了。\n威联通在B站有个比较惨的官方号，没事可以关注，也许能获得有用的信息，传送门。\n","date":"2020-03-21","description":"本文介绍如何在威联通NAS上部署自己的vscode编辑器","tags":"威联通\nQNAP\nCode Server\nNAS\nVS Code","title":"威联通：“私人定制”在线代码编辑器","uri":"/2020/03/qnap-codeserver-self-host/"},{"content":"新 Microsoft Edge 浏览器基于 Google 的开源项目 Chromium ，针对 Windows 10 进行优化。一个微软账号，跨平台同步，和 Chrome 扩展通用，官方扩展商店也越来越完善。\n \u0026nbsp;前言 如果你想绕过开发者模式直接部署本地 crx 文件，如果你是一个 IT 运维管理着几十台 PC 想要快速部署大量在线扩展，如果你也只是跟我一样闲得蛋疼，不妨接着往下看看如何在 Windows 上通过注册表来实现安装扩展。\n说明\n本文基于 Windows 10 1909 专业版、Edge 80.0.361.57 正式版测试实现  警告\n修改注册表有风险，请提前做好注册表和浏览器数据备份。想要删除扩展需要删除相应的注册表键值，直接在浏览器中删除可能会发生奇奇怪怪的问题。  \u0026nbsp;手动修改注册表 \u0026nbsp;本地版 如果你拥有本地 crx 文件，苦于开发模式加载压缩包每次启动的提示，可以通过构造如下注册表值来实现。\n 打开https://robwu.nl/crxviewer这个网址，上传你的 crx 文件    robwu网站   在左边栏点击manifest.json，记录下version后面的版本号    manifest.json   点击上方的Show analysis，记录下Extension ID后面那一串唯一 ID    Show analysis   打开注册表，Edge 在HKEY_CURRENT_USER\\Software\\Microsoft\\Edge\\Extensions下面新建项，命名为第 3 步中记录的唯一 ID    regedit_edge    在右边新建一个字符串path，将它的值修改为 crx 文件在你电脑上的绝对路径，比如C:\\Program Files (x86)\\Internet Download Manager\\IDMGCExt.crx（IDM 的扩展就是在安装软件的时候这样被自动安装上去的）\n  继续新建一个字符串，命名为version，将它的值修改为第 2 步中的版本号，比如6.36.5\n  等待扩展安装成功，然后手动启用下扩展。\n  \u0026nbsp;在线版 如果你想安装来自 Edge 扩展商店 或 Chrome 扩展商店 的扩展，也可以通过构造如下注册表值来实现。\n  从官方商店直接搜索扩展，记录下网址。\n  在HKEY_CURRENT_USER\\Software\\Microsoft\\Edge\\Extensions下新建项，命名为网址后缀类似oogbnpmeihfgnccdnmmlgicknopghhma这样的唯一 ID\n  右边新建两个字符串path和update_url，path的值是第 1 步的网址，而update_url的值，Edge 商店是https://extensionwebstorebase.edgesv.net/v1/crx，Chrome 商店是http://clients2.google.com/service/update2/crx\n    regedit_online   等待扩展安装成功，然后手动启用下扩展。在线版的扩展后续应该能够自动更新，这个要等待时间验证了。  \u0026nbsp;编写 reg 文件批量导入 1 2 3 4 5 6 7 8  Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\\Software\\Microsoft\\Edge\\Extensions\\llhcnbijpnechllogkacbcjmkcgjbjfi] \u0026#34;path\u0026#34;=\u0026#34;https://microsoftedge.microsoft.com/addons/detail/llhcnbijpnechllogkacbcjmkcgjbjfi\u0026#34; \u0026#34;update_url\u0026#34;=\u0026#34;https://extensionwebstorebase.edgesv.net/v1/crx\u0026#34; [HKEY_CURRENT_USER\\Software\\Microsoft\\Edge\\Extensions\\ngpampappnmepgilojfohadhhmbhlaek] \u0026#34;path\u0026#34;=\u0026#34;C:\\Program Files (x86)\\Internet Download Manager\\IDMGCExt.crx\u0026#34; \u0026#34;version\u0026#34;=\u0026#34;6.36.5\u0026#34;   用任意文本编辑器保存为 reg 文件，然后导入注册表来实现扩展的批量部署安装。\n\u0026nbsp;后记 折腾到此结束，再次强调删除扩展须删除相应的注册表键值，否则可能会发生意外。\n部分内容引用自：Google Chrome Dev\n","date":"2020-03-20","description":"本文介绍基于注册表安装在线和本地扩展的小技巧","tags":"Edge\nChromium\nMicrosoft\n注册表\n浏览器\n扩展","title":"浏览器小技巧：通过注册表为Chromium Edge安装扩展","uri":"/2020/03/install-edge-extensions-via-registry/"}]